#
# This is configuration for golangci-lint (ex. gometalinter).
# It is designed to be opinionated and as strict as humanly possible.
# DO NOT DISABLE RULES WITHOUT A GOOD REASON!
#

[linters]
  enable = [
    "asciicheck",       # Checks that the code does not contain non-ASCII identifiers
    "dogsled",          # Checks assignments with too many blank identifiers
    "dupl",             # Code clone detection
    "errorlint",        # Finds code that will cause problems with the error wrapping
    "exhaustive",       # Checks exhaustiveness of enum switch statements
    "exportloopref",    # Checks for pointers to enclosing loop variables
    "funlen",           # Checks length of functions
    "gci",              # Checks package import order and makes it always deterministic
    "gochecknoglobals", # Checks that no global variables exist
    "gochecknoinits",   # Checks that no init functions are present in Go code
    "gocognit",         # Computes and checks the cognitive complexity of functions
    "goconst",          # Finds repeated strings that could be replaced by a constant
    "gocritic",         # Collection of various opinionated linters
    "gocyclo",          # Computes and checks the cyclomatic complexity of functions
    "gofmt",            # Gofmt checks whether code was gofmt-ed
    "goimports",        # Checks unused imports
    "golint",           # Golint prints out style mistakes
    "gosec",            # Inspects source code for security problems
    "interfacer",       # Linter that suggests narrower interface types
    "lll",              # Reports long lines
    "maligned",         # Tool to detect Go structs that would take less memory if their fields were sorted
    "misspell",         # Finds commonly misspelled English words in comments
    "nakedret",         # Finds naked returns in functions greater than a specified function length
    "nolintlint",       # Reports ill-formed or insufficient nolint directives
    "scopelint",        # Checks for unpinned variables in go programs
    "stylecheck",       # Checks coding style
    "tparallel",        # Detects inappropriate usage of t.Parallel() method
    "unconvert",        # Detects unnecessary type conversions
    "unparam",          # Reports unused function parameters
    "whitespace",       # Detects leading and trailing whitespaces
  ]

[linters-settings]
  [linters-settings.funlen]
    lines = 120 # default 60

  [linters-settings.goimports]
    local-prefixes = "github.com/hired/gevulot"

  [linters-settings.lll]
    line-length = 140